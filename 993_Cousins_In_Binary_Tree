/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

// using dfs to search for x and y and then making the cousins comparison in the main function.
    int xdepth,ydepth,xparent,yparent;
    void findXandY(TreeNode *root,int x,int y,int depth,int parent){
        if(root!=NULL){
            if(root->val==x){
                xdepth=depth;
                xparent=parent;
            }
            if(root->val==y){
                ydepth=depth;
                yparent=parent;
            }
            findXandY(root->left,x,y,depth+1,root->val);
            findXandY(root->right,x,y,depth+1,root->val);
        }
    }
    bool isCousins(TreeNode* root, int x, int y) {
        xdepth=-1,ydepth=-2,xparent=-3,yparent=-4;
        findXandY(root->left,x,y,0,root->val);
        findXandY(root->right,x,y,0,root->val);
        if(xdepth==ydepth and xparent!=yparent){
            return true;
        }
        return false;
    }
};
